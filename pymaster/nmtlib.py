# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nmtlib', [dirname(__file__)])
        except ImportError:
            import _nmtlib
            return _nmtlib
        if fp is not None:
            try:
                _mod = imp.load_module('_nmtlib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _nmtlib = swig_import_helper()
    del swig_import_helper
else:
    import _nmtlib
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class binning_scheme_flat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, binning_scheme_flat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, binning_scheme_flat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n_bands"] = _nmtlib.binning_scheme_flat_n_bands_set
    __swig_getmethods__["n_bands"] = _nmtlib.binning_scheme_flat_n_bands_get
    if _newclass:
        n_bands = _swig_property(_nmtlib.binning_scheme_flat_n_bands_get, _nmtlib.binning_scheme_flat_n_bands_set)
    __swig_setmethods__["ell_0_list"] = _nmtlib.binning_scheme_flat_ell_0_list_set
    __swig_getmethods__["ell_0_list"] = _nmtlib.binning_scheme_flat_ell_0_list_get
    if _newclass:
        ell_0_list = _swig_property(_nmtlib.binning_scheme_flat_ell_0_list_get, _nmtlib.binning_scheme_flat_ell_0_list_set)
    __swig_setmethods__["ell_f_list"] = _nmtlib.binning_scheme_flat_ell_f_list_set
    __swig_getmethods__["ell_f_list"] = _nmtlib.binning_scheme_flat_ell_f_list_get
    if _newclass:
        ell_f_list = _swig_property(_nmtlib.binning_scheme_flat_ell_f_list_get, _nmtlib.binning_scheme_flat_ell_f_list_set)

    def __init__(self):
        this = _nmtlib.new_binning_scheme_flat()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _nmtlib.delete_binning_scheme_flat
    __del__ = lambda self: None
binning_scheme_flat_swigregister = _nmtlib.binning_scheme_flat_swigregister
binning_scheme_flat_swigregister(binning_scheme_flat)


def bins_flat_constant(nlb, lmax):
    return _nmtlib.bins_flat_constant(nlb, lmax)
bins_flat_constant = _nmtlib.bins_flat_constant

def bins_flat_create(nell, l0, lf):
    return _nmtlib.bins_flat_create(nell, l0, lf)
bins_flat_create = _nmtlib.bins_flat_create

def bins_flat_free(bin):
    return _nmtlib.bins_flat_free(bin)
bins_flat_free = _nmtlib.bins_flat_free

def bin_cls_flat(bin, nl, larr, cls_in, cls_out, ncls):
    return _nmtlib.bin_cls_flat(bin, nl, larr, cls_in, cls_out, ncls)
bin_cls_flat = _nmtlib.bin_cls_flat

def unbin_cls_flat(bin, cls_in, nl, larr, cls_out, ncls):
    return _nmtlib.unbin_cls_flat(bin, cls_in, nl, larr, cls_out, ncls)
unbin_cls_flat = _nmtlib.unbin_cls_flat

def ell_eff_flat(bin, larr):
    return _nmtlib.ell_eff_flat(bin, larr)
ell_eff_flat = _nmtlib.ell_eff_flat

def bins_flat_search_fast(bin, l, il):
    return _nmtlib.bins_flat_search_fast(bin, l, il)
bins_flat_search_fast = _nmtlib.bins_flat_search_fast
class binning_scheme(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, binning_scheme, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, binning_scheme, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n_bands"] = _nmtlib.binning_scheme_n_bands_set
    __swig_getmethods__["n_bands"] = _nmtlib.binning_scheme_n_bands_get
    if _newclass:
        n_bands = _swig_property(_nmtlib.binning_scheme_n_bands_get, _nmtlib.binning_scheme_n_bands_set)
    __swig_setmethods__["nell_list"] = _nmtlib.binning_scheme_nell_list_set
    __swig_getmethods__["nell_list"] = _nmtlib.binning_scheme_nell_list_get
    if _newclass:
        nell_list = _swig_property(_nmtlib.binning_scheme_nell_list_get, _nmtlib.binning_scheme_nell_list_set)
    __swig_setmethods__["ell_list"] = _nmtlib.binning_scheme_ell_list_set
    __swig_getmethods__["ell_list"] = _nmtlib.binning_scheme_ell_list_get
    if _newclass:
        ell_list = _swig_property(_nmtlib.binning_scheme_ell_list_get, _nmtlib.binning_scheme_ell_list_set)
    __swig_setmethods__["w_list"] = _nmtlib.binning_scheme_w_list_set
    __swig_getmethods__["w_list"] = _nmtlib.binning_scheme_w_list_get
    if _newclass:
        w_list = _swig_property(_nmtlib.binning_scheme_w_list_get, _nmtlib.binning_scheme_w_list_set)
    __swig_setmethods__["f_ell"] = _nmtlib.binning_scheme_f_ell_set
    __swig_getmethods__["f_ell"] = _nmtlib.binning_scheme_f_ell_get
    if _newclass:
        f_ell = _swig_property(_nmtlib.binning_scheme_f_ell_get, _nmtlib.binning_scheme_f_ell_set)
    __swig_setmethods__["ell_max"] = _nmtlib.binning_scheme_ell_max_set
    __swig_getmethods__["ell_max"] = _nmtlib.binning_scheme_ell_max_get
    if _newclass:
        ell_max = _swig_property(_nmtlib.binning_scheme_ell_max_get, _nmtlib.binning_scheme_ell_max_set)

    def __init__(self):
        this = _nmtlib.new_binning_scheme()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _nmtlib.delete_binning_scheme
    __del__ = lambda self: None
binning_scheme_swigregister = _nmtlib.binning_scheme_swigregister
binning_scheme_swigregister(binning_scheme)


def bins_constant(nlb, lmax, is_l2):
    return _nmtlib.bins_constant(nlb, lmax, is_l2)
bins_constant = _nmtlib.bins_constant

def bins_create(nell, bpws, ells, weights, f_ell, lmax):
    return _nmtlib.bins_create(nell, bpws, ells, weights, f_ell, lmax)
bins_create = _nmtlib.bins_create

def bins_read(fname, lmax):
    return _nmtlib.bins_read(fname, lmax)
bins_read = _nmtlib.bins_read

def bins_free(bin):
    return _nmtlib.bins_free(bin)
bins_free = _nmtlib.bins_free

def bin_cls(bin, cls_in, cls_out, ncls):
    return _nmtlib.bin_cls(bin, cls_in, cls_out, ncls)
bin_cls = _nmtlib.bin_cls

def unbin_cls(bin, cls_in, cls_out, ncls):
    return _nmtlib.unbin_cls(bin, cls_in, cls_out, ncls)
unbin_cls = _nmtlib.unbin_cls

def ell_eff(bin, larr):
    return _nmtlib.ell_eff(bin, larr)
ell_eff = _nmtlib.ell_eff
class k_function(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, k_function, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, k_function, name)
    __repr__ = _swig_repr
    __swig_setmethods__["is_const"] = _nmtlib.k_function_is_const_set
    __swig_getmethods__["is_const"] = _nmtlib.k_function_is_const_get
    if _newclass:
        is_const = _swig_property(_nmtlib.k_function_is_const_get, _nmtlib.k_function_is_const_set)
    __swig_setmethods__["x0"] = _nmtlib.k_function_x0_set
    __swig_getmethods__["x0"] = _nmtlib.k_function_x0_get
    if _newclass:
        x0 = _swig_property(_nmtlib.k_function_x0_get, _nmtlib.k_function_x0_set)
    __swig_setmethods__["xf"] = _nmtlib.k_function_xf_set
    __swig_getmethods__["xf"] = _nmtlib.k_function_xf_get
    if _newclass:
        xf = _swig_property(_nmtlib.k_function_xf_get, _nmtlib.k_function_xf_set)
    __swig_setmethods__["y0"] = _nmtlib.k_function_y0_set
    __swig_getmethods__["y0"] = _nmtlib.k_function_y0_get
    if _newclass:
        y0 = _swig_property(_nmtlib.k_function_y0_get, _nmtlib.k_function_y0_set)
    __swig_setmethods__["yf"] = _nmtlib.k_function_yf_set
    __swig_getmethods__["yf"] = _nmtlib.k_function_yf_get
    if _newclass:
        yf = _swig_property(_nmtlib.k_function_yf_get, _nmtlib.k_function_yf_set)
    __swig_setmethods__["spl"] = _nmtlib.k_function_spl_set
    __swig_getmethods__["spl"] = _nmtlib.k_function_spl_get
    if _newclass:
        spl = _swig_property(_nmtlib.k_function_spl_get, _nmtlib.k_function_spl_set)

    def __init__(self):
        this = _nmtlib.new_k_function()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _nmtlib.delete_k_function
    __del__ = lambda self: None
k_function_swigregister = _nmtlib.k_function_swigregister
k_function_swigregister(k_function)


def k_function_alloc(nk, karr, farr, y0, yf, is_const):
    return _nmtlib.k_function_alloc(nk, karr, farr, y0, yf, is_const)
k_function_alloc = _nmtlib.k_function_alloc

def k_function_free(f):
    return _nmtlib.k_function_free(f)
k_function_free = _nmtlib.k_function_free

def k_function_eval(f, k, intacc):
    return _nmtlib.k_function_eval(f, k, intacc)
k_function_eval = _nmtlib.k_function_eval
class flatsky_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flatsky_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flatsky_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nx"] = _nmtlib.flatsky_info_nx_set
    __swig_getmethods__["nx"] = _nmtlib.flatsky_info_nx_get
    if _newclass:
        nx = _swig_property(_nmtlib.flatsky_info_nx_get, _nmtlib.flatsky_info_nx_set)
    __swig_setmethods__["ny"] = _nmtlib.flatsky_info_ny_set
    __swig_getmethods__["ny"] = _nmtlib.flatsky_info_ny_get
    if _newclass:
        ny = _swig_property(_nmtlib.flatsky_info_ny_get, _nmtlib.flatsky_info_ny_set)
    __swig_setmethods__["npix"] = _nmtlib.flatsky_info_npix_set
    __swig_getmethods__["npix"] = _nmtlib.flatsky_info_npix_get
    if _newclass:
        npix = _swig_property(_nmtlib.flatsky_info_npix_get, _nmtlib.flatsky_info_npix_set)
    __swig_setmethods__["lx"] = _nmtlib.flatsky_info_lx_set
    __swig_getmethods__["lx"] = _nmtlib.flatsky_info_lx_get
    if _newclass:
        lx = _swig_property(_nmtlib.flatsky_info_lx_get, _nmtlib.flatsky_info_lx_set)
    __swig_setmethods__["ly"] = _nmtlib.flatsky_info_ly_set
    __swig_getmethods__["ly"] = _nmtlib.flatsky_info_ly_get
    if _newclass:
        ly = _swig_property(_nmtlib.flatsky_info_ly_get, _nmtlib.flatsky_info_ly_set)
    __swig_setmethods__["pixsize"] = _nmtlib.flatsky_info_pixsize_set
    __swig_getmethods__["pixsize"] = _nmtlib.flatsky_info_pixsize_get
    if _newclass:
        pixsize = _swig_property(_nmtlib.flatsky_info_pixsize_get, _nmtlib.flatsky_info_pixsize_set)
    __swig_setmethods__["n_ell"] = _nmtlib.flatsky_info_n_ell_set
    __swig_getmethods__["n_ell"] = _nmtlib.flatsky_info_n_ell_get
    if _newclass:
        n_ell = _swig_property(_nmtlib.flatsky_info_n_ell_get, _nmtlib.flatsky_info_n_ell_set)
    __swig_setmethods__["dell"] = _nmtlib.flatsky_info_dell_set
    __swig_getmethods__["dell"] = _nmtlib.flatsky_info_dell_get
    if _newclass:
        dell = _swig_property(_nmtlib.flatsky_info_dell_get, _nmtlib.flatsky_info_dell_set)
    __swig_setmethods__["i_dell"] = _nmtlib.flatsky_info_i_dell_set
    __swig_getmethods__["i_dell"] = _nmtlib.flatsky_info_i_dell_get
    if _newclass:
        i_dell = _swig_property(_nmtlib.flatsky_info_i_dell_get, _nmtlib.flatsky_info_i_dell_set)
    __swig_setmethods__["ell_min"] = _nmtlib.flatsky_info_ell_min_set
    __swig_getmethods__["ell_min"] = _nmtlib.flatsky_info_ell_min_get
    if _newclass:
        ell_min = _swig_property(_nmtlib.flatsky_info_ell_min_get, _nmtlib.flatsky_info_ell_min_set)

    def __init__(self):
        this = _nmtlib.new_flatsky_info()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _nmtlib.delete_flatsky_info
    __del__ = lambda self: None
flatsky_info_swigregister = _nmtlib.flatsky_info_swigregister
flatsky_info_swigregister(flatsky_info)


def flatsky_info_alloc(nx, ny, lx, ly):
    return _nmtlib.flatsky_info_alloc(nx, ny, lx, ly)
flatsky_info_alloc = _nmtlib.flatsky_info_alloc

def flatsky_info_free(fs):
    return _nmtlib.flatsky_info_free(fs)
flatsky_info_free = _nmtlib.flatsky_info_free
class field_flat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, field_flat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, field_flat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fs"] = _nmtlib.field_flat_fs_set
    __swig_getmethods__["fs"] = _nmtlib.field_flat_fs_get
    if _newclass:
        fs = _swig_property(_nmtlib.field_flat_fs_get, _nmtlib.field_flat_fs_set)
    __swig_setmethods__["npix"] = _nmtlib.field_flat_npix_set
    __swig_getmethods__["npix"] = _nmtlib.field_flat_npix_get
    if _newclass:
        npix = _swig_property(_nmtlib.field_flat_npix_get, _nmtlib.field_flat_npix_set)
    __swig_setmethods__["pure_e"] = _nmtlib.field_flat_pure_e_set
    __swig_getmethods__["pure_e"] = _nmtlib.field_flat_pure_e_get
    if _newclass:
        pure_e = _swig_property(_nmtlib.field_flat_pure_e_get, _nmtlib.field_flat_pure_e_set)
    __swig_setmethods__["pure_b"] = _nmtlib.field_flat_pure_b_set
    __swig_getmethods__["pure_b"] = _nmtlib.field_flat_pure_b_get
    if _newclass:
        pure_b = _swig_property(_nmtlib.field_flat_pure_b_get, _nmtlib.field_flat_pure_b_set)
    __swig_setmethods__["mask"] = _nmtlib.field_flat_mask_set
    __swig_getmethods__["mask"] = _nmtlib.field_flat_mask_get
    if _newclass:
        mask = _swig_property(_nmtlib.field_flat_mask_get, _nmtlib.field_flat_mask_set)
    __swig_setmethods__["a_mask"] = _nmtlib.field_flat_a_mask_set
    __swig_getmethods__["a_mask"] = _nmtlib.field_flat_a_mask_get
    if _newclass:
        a_mask = _swig_property(_nmtlib.field_flat_a_mask_get, _nmtlib.field_flat_a_mask_set)
    __swig_setmethods__["pol"] = _nmtlib.field_flat_pol_set
    __swig_getmethods__["pol"] = _nmtlib.field_flat_pol_get
    if _newclass:
        pol = _swig_property(_nmtlib.field_flat_pol_get, _nmtlib.field_flat_pol_set)
    __swig_setmethods__["nmaps"] = _nmtlib.field_flat_nmaps_set
    __swig_getmethods__["nmaps"] = _nmtlib.field_flat_nmaps_get
    if _newclass:
        nmaps = _swig_property(_nmtlib.field_flat_nmaps_get, _nmtlib.field_flat_nmaps_set)
    __swig_setmethods__["maps"] = _nmtlib.field_flat_maps_set
    __swig_getmethods__["maps"] = _nmtlib.field_flat_maps_get
    if _newclass:
        maps = _swig_property(_nmtlib.field_flat_maps_get, _nmtlib.field_flat_maps_set)
    __swig_setmethods__["alms"] = _nmtlib.field_flat_alms_set
    __swig_getmethods__["alms"] = _nmtlib.field_flat_alms_get
    if _newclass:
        alms = _swig_property(_nmtlib.field_flat_alms_get, _nmtlib.field_flat_alms_set)
    __swig_setmethods__["ntemp"] = _nmtlib.field_flat_ntemp_set
    __swig_getmethods__["ntemp"] = _nmtlib.field_flat_ntemp_get
    if _newclass:
        ntemp = _swig_property(_nmtlib.field_flat_ntemp_get, _nmtlib.field_flat_ntemp_set)
    __swig_setmethods__["temp"] = _nmtlib.field_flat_temp_set
    __swig_getmethods__["temp"] = _nmtlib.field_flat_temp_get
    if _newclass:
        temp = _swig_property(_nmtlib.field_flat_temp_get, _nmtlib.field_flat_temp_set)
    __swig_setmethods__["a_temp"] = _nmtlib.field_flat_a_temp_set
    __swig_getmethods__["a_temp"] = _nmtlib.field_flat_a_temp_get
    if _newclass:
        a_temp = _swig_property(_nmtlib.field_flat_a_temp_get, _nmtlib.field_flat_a_temp_set)
    __swig_setmethods__["matrix_M"] = _nmtlib.field_flat_matrix_M_set
    __swig_getmethods__["matrix_M"] = _nmtlib.field_flat_matrix_M_get
    if _newclass:
        matrix_M = _swig_property(_nmtlib.field_flat_matrix_M_get, _nmtlib.field_flat_matrix_M_set)
    __swig_setmethods__["beam"] = _nmtlib.field_flat_beam_set
    __swig_getmethods__["beam"] = _nmtlib.field_flat_beam_get
    if _newclass:
        beam = _swig_property(_nmtlib.field_flat_beam_get, _nmtlib.field_flat_beam_set)

    def __init__(self):
        this = _nmtlib.new_field_flat()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _nmtlib.delete_field_flat
    __del__ = lambda self: None
field_flat_swigregister = _nmtlib.field_flat_swigregister
field_flat_swigregister(field_flat)


def field_flat_free(fl):
    return _nmtlib.field_flat_free(fl)
field_flat_free = _nmtlib.field_flat_free

def field_flat_alloc(nx, ny, lx, ly, mask, pol, maps, ntemp, temp, nl_beam, l_beam, beam, pure_e, pure_b, tol_pinv, masked_input):
    return _nmtlib.field_flat_alloc(nx, ny, lx, ly, mask, pol, maps, ntemp, temp, nl_beam, l_beam, beam, pure_e, pure_b, tol_pinv, masked_input)
field_flat_alloc = _nmtlib.field_flat_alloc

def synfast_flat(nx, ny, lx, ly, nfields, spin_arr, nl_beam, l_beam, beam_fields, nl_cell, l_cell, cell_fields, seed):
    return _nmtlib.synfast_flat(nx, ny, lx, ly, nfields, spin_arr, nl_beam, l_beam, beam_fields, nl_cell, l_cell, cell_fields, seed)
synfast_flat = _nmtlib.synfast_flat

def purify_flat(fl, mask, walm0, maps_in, maps_out, alms):
    return _nmtlib.purify_flat(fl, mask, walm0, maps_in, maps_out, alms)
purify_flat = _nmtlib.purify_flat
class curvedsky_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, curvedsky_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, curvedsky_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["is_healpix"] = _nmtlib.curvedsky_info_is_healpix_set
    __swig_getmethods__["is_healpix"] = _nmtlib.curvedsky_info_is_healpix_get
    if _newclass:
        is_healpix = _swig_property(_nmtlib.curvedsky_info_is_healpix_get, _nmtlib.curvedsky_info_is_healpix_set)
    __swig_setmethods__["n_eq"] = _nmtlib.curvedsky_info_n_eq_set
    __swig_getmethods__["n_eq"] = _nmtlib.curvedsky_info_n_eq_get
    if _newclass:
        n_eq = _swig_property(_nmtlib.curvedsky_info_n_eq_get, _nmtlib.curvedsky_info_n_eq_set)
    __swig_setmethods__["lmax_sht"] = _nmtlib.curvedsky_info_lmax_sht_set
    __swig_getmethods__["lmax_sht"] = _nmtlib.curvedsky_info_lmax_sht_get
    if _newclass:
        lmax_sht = _swig_property(_nmtlib.curvedsky_info_lmax_sht_get, _nmtlib.curvedsky_info_lmax_sht_set)
    __swig_setmethods__["nx_short"] = _nmtlib.curvedsky_info_nx_short_set
    __swig_getmethods__["nx_short"] = _nmtlib.curvedsky_info_nx_short_get
    if _newclass:
        nx_short = _swig_property(_nmtlib.curvedsky_info_nx_short_get, _nmtlib.curvedsky_info_nx_short_set)
    __swig_setmethods__["nx"] = _nmtlib.curvedsky_info_nx_set
    __swig_getmethods__["nx"] = _nmtlib.curvedsky_info_nx_get
    if _newclass:
        nx = _swig_property(_nmtlib.curvedsky_info_nx_get, _nmtlib.curvedsky_info_nx_set)
    __swig_setmethods__["ny"] = _nmtlib.curvedsky_info_ny_set
    __swig_getmethods__["ny"] = _nmtlib.curvedsky_info_ny_get
    if _newclass:
        ny = _swig_property(_nmtlib.curvedsky_info_ny_get, _nmtlib.curvedsky_info_ny_set)
    __swig_setmethods__["npix"] = _nmtlib.curvedsky_info_npix_set
    __swig_getmethods__["npix"] = _nmtlib.curvedsky_info_npix_get
    if _newclass:
        npix = _swig_property(_nmtlib.curvedsky_info_npix_get, _nmtlib.curvedsky_info_npix_set)
    __swig_setmethods__["Delta_theta"] = _nmtlib.curvedsky_info_Delta_theta_set
    __swig_getmethods__["Delta_theta"] = _nmtlib.curvedsky_info_Delta_theta_get
    if _newclass:
        Delta_theta = _swig_property(_nmtlib.curvedsky_info_Delta_theta_get, _nmtlib.curvedsky_info_Delta_theta_set)
    __swig_setmethods__["Delta_phi"] = _nmtlib.curvedsky_info_Delta_phi_set
    __swig_getmethods__["Delta_phi"] = _nmtlib.curvedsky_info_Delta_phi_get
    if _newclass:
        Delta_phi = _swig_property(_nmtlib.curvedsky_info_Delta_phi_get, _nmtlib.curvedsky_info_Delta_phi_set)
    __swig_setmethods__["phi0"] = _nmtlib.curvedsky_info_phi0_set
    __swig_getmethods__["phi0"] = _nmtlib.curvedsky_info_phi0_get
    if _newclass:
        phi0 = _swig_property(_nmtlib.curvedsky_info_phi0_get, _nmtlib.curvedsky_info_phi0_set)
    __swig_setmethods__["theta0"] = _nmtlib.curvedsky_info_theta0_set
    __swig_getmethods__["theta0"] = _nmtlib.curvedsky_info_theta0_get
    if _newclass:
        theta0 = _swig_property(_nmtlib.curvedsky_info_theta0_get, _nmtlib.curvedsky_info_theta0_set)

    def __init__(self):
        this = _nmtlib.new_curvedsky_info()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _nmtlib.delete_curvedsky_info
    __del__ = lambda self: None
curvedsky_info_swigregister = _nmtlib.curvedsky_info_swigregister
curvedsky_info_swigregister(curvedsky_info)


def curvedsky_info_copy(cs_in):
    return _nmtlib.curvedsky_info_copy(cs_in)
curvedsky_info_copy = _nmtlib.curvedsky_info_copy

def curvedsky_info_alloc(is_healpix, nside, lmax_sht, nx0, ny0, Dtheta, Dphi, phi0, theta0):
    return _nmtlib.curvedsky_info_alloc(is_healpix, nside, lmax_sht, nx0, ny0, Dtheta, Dphi, phi0, theta0)
curvedsky_info_alloc = _nmtlib.curvedsky_info_alloc

def diff_curvedsky_info(c1, c2):
    return _nmtlib.diff_curvedsky_info(c1, c2)
diff_curvedsky_info = _nmtlib.diff_curvedsky_info

def extend_CAR_map(cs, map_in):
    return _nmtlib.extend_CAR_map(cs, map_in)
extend_CAR_map = _nmtlib.extend_CAR_map
class field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, field, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cs"] = _nmtlib.field_cs_set
    __swig_getmethods__["cs"] = _nmtlib.field_cs_get
    if _newclass:
        cs = _swig_property(_nmtlib.field_cs_get, _nmtlib.field_cs_set)
    __swig_setmethods__["npix"] = _nmtlib.field_npix_set
    __swig_getmethods__["npix"] = _nmtlib.field_npix_get
    if _newclass:
        npix = _swig_property(_nmtlib.field_npix_get, _nmtlib.field_npix_set)
    __swig_setmethods__["lmax"] = _nmtlib.field_lmax_set
    __swig_getmethods__["lmax"] = _nmtlib.field_lmax_get
    if _newclass:
        lmax = _swig_property(_nmtlib.field_lmax_get, _nmtlib.field_lmax_set)
    __swig_setmethods__["pure_e"] = _nmtlib.field_pure_e_set
    __swig_getmethods__["pure_e"] = _nmtlib.field_pure_e_get
    if _newclass:
        pure_e = _swig_property(_nmtlib.field_pure_e_get, _nmtlib.field_pure_e_set)
    __swig_setmethods__["pure_b"] = _nmtlib.field_pure_b_set
    __swig_getmethods__["pure_b"] = _nmtlib.field_pure_b_get
    if _newclass:
        pure_b = _swig_property(_nmtlib.field_pure_b_get, _nmtlib.field_pure_b_set)
    __swig_setmethods__["mask"] = _nmtlib.field_mask_set
    __swig_getmethods__["mask"] = _nmtlib.field_mask_get
    if _newclass:
        mask = _swig_property(_nmtlib.field_mask_get, _nmtlib.field_mask_set)
    __swig_setmethods__["a_mask"] = _nmtlib.field_a_mask_set
    __swig_getmethods__["a_mask"] = _nmtlib.field_a_mask_get
    if _newclass:
        a_mask = _swig_property(_nmtlib.field_a_mask_get, _nmtlib.field_a_mask_set)
    __swig_setmethods__["pol"] = _nmtlib.field_pol_set
    __swig_getmethods__["pol"] = _nmtlib.field_pol_get
    if _newclass:
        pol = _swig_property(_nmtlib.field_pol_get, _nmtlib.field_pol_set)
    __swig_setmethods__["nmaps"] = _nmtlib.field_nmaps_set
    __swig_getmethods__["nmaps"] = _nmtlib.field_nmaps_get
    if _newclass:
        nmaps = _swig_property(_nmtlib.field_nmaps_get, _nmtlib.field_nmaps_set)
    __swig_setmethods__["maps"] = _nmtlib.field_maps_set
    __swig_getmethods__["maps"] = _nmtlib.field_maps_get
    if _newclass:
        maps = _swig_property(_nmtlib.field_maps_get, _nmtlib.field_maps_set)
    __swig_setmethods__["alms"] = _nmtlib.field_alms_set
    __swig_getmethods__["alms"] = _nmtlib.field_alms_get
    if _newclass:
        alms = _swig_property(_nmtlib.field_alms_get, _nmtlib.field_alms_set)
    __swig_setmethods__["ntemp"] = _nmtlib.field_ntemp_set
    __swig_getmethods__["ntemp"] = _nmtlib.field_ntemp_get
    if _newclass:
        ntemp = _swig_property(_nmtlib.field_ntemp_get, _nmtlib.field_ntemp_set)
    __swig_setmethods__["temp"] = _nmtlib.field_temp_set
    __swig_getmethods__["temp"] = _nmtlib.field_temp_get
    if _newclass:
        temp = _swig_property(_nmtlib.field_temp_get, _nmtlib.field_temp_set)
    __swig_setmethods__["a_temp"] = _nmtlib.field_a_temp_set
    __swig_getmethods__["a_temp"] = _nmtlib.field_a_temp_get
    if _newclass:
        a_temp = _swig_property(_nmtlib.field_a_temp_get, _nmtlib.field_a_temp_set)
    __swig_setmethods__["matrix_M"] = _nmtlib.field_matrix_M_set
    __swig_getmethods__["matrix_M"] = _nmtlib.field_matrix_M_get
    if _newclass:
        matrix_M = _swig_property(_nmtlib.field_matrix_M_get, _nmtlib.field_matrix_M_set)
    __swig_setmethods__["beam"] = _nmtlib.field_beam_set
    __swig_getmethods__["beam"] = _nmtlib.field_beam_get
    if _newclass:
        beam = _swig_property(_nmtlib.field_beam_get, _nmtlib.field_beam_set)

    def __init__(self):
        this = _nmtlib.new_field()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _nmtlib.delete_field
    __del__ = lambda self: None
field_swigregister = _nmtlib.field_swigregister
field_swigregister(field)


def field_free(fl):
    return _nmtlib.field_free(fl)
field_free = _nmtlib.field_free

def field_alloc_sph(cs, mask, pol, maps, ntemp, temp, beam, pure_e, pure_b, n_iter_mask_purify, tol_pinv, niter, masked_input):
    return _nmtlib.field_alloc_sph(cs, mask, pol, maps, ntemp, temp, beam, pure_e, pure_b, n_iter_mask_purify, tol_pinv, niter, masked_input)
field_alloc_sph = _nmtlib.field_alloc_sph

def field_read(is_healpix, fname_mask, fname_maps, fname_temp, fname_beam, pol, pure_e, pure_b, n_iter_mask_purify, tol_pinv, niter):
    return _nmtlib.field_read(is_healpix, fname_mask, fname_maps, fname_temp, fname_beam, pol, pure_e, pure_b, n_iter_mask_purify, tol_pinv, niter)
field_read = _nmtlib.field_read

def synfast_sph(cs, nfields, spin_arr, lmax, cells, beam_fields, seed):
    return _nmtlib.synfast_sph(cs, nfields, spin_arr, lmax, cells, beam_fields, seed)
synfast_sph = _nmtlib.synfast_sph

def purify(fl, mask, walm0, maps_in, maps_out, alms, niter):
    return _nmtlib.purify(fl, mask, walm0, maps_in, maps_out, alms, niter)
purify = _nmtlib.purify

def apodize_mask(nside, mask_in, mask_out, aposize, apotype):
    return _nmtlib.apodize_mask(nside, mask_in, mask_out, aposize, apotype)
apodize_mask = _nmtlib.apodize_mask

def apodize_mask_flat(nx, ny, lx, ly, mask_in, mask_out, aposize, apotype):
    return _nmtlib.apodize_mask_flat(nx, ny, lx, ly, mask_in, mask_out, aposize, apotype)
apodize_mask_flat = _nmtlib.apodize_mask_flat
class workspace_flat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, workspace_flat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, workspace_flat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ncls"] = _nmtlib.workspace_flat_ncls_set
    __swig_getmethods__["ncls"] = _nmtlib.workspace_flat_ncls_get
    if _newclass:
        ncls = _swig_property(_nmtlib.workspace_flat_ncls_get, _nmtlib.workspace_flat_ncls_set)
    __swig_setmethods__["ellcut_x"] = _nmtlib.workspace_flat_ellcut_x_set
    __swig_getmethods__["ellcut_x"] = _nmtlib.workspace_flat_ellcut_x_get
    if _newclass:
        ellcut_x = _swig_property(_nmtlib.workspace_flat_ellcut_x_get, _nmtlib.workspace_flat_ellcut_x_set)
    __swig_setmethods__["ellcut_y"] = _nmtlib.workspace_flat_ellcut_y_set
    __swig_getmethods__["ellcut_y"] = _nmtlib.workspace_flat_ellcut_y_get
    if _newclass:
        ellcut_y = _swig_property(_nmtlib.workspace_flat_ellcut_y_get, _nmtlib.workspace_flat_ellcut_y_set)
    __swig_setmethods__["pe1"] = _nmtlib.workspace_flat_pe1_set
    __swig_getmethods__["pe1"] = _nmtlib.workspace_flat_pe1_get
    if _newclass:
        pe1 = _swig_property(_nmtlib.workspace_flat_pe1_get, _nmtlib.workspace_flat_pe1_set)
    __swig_setmethods__["pe2"] = _nmtlib.workspace_flat_pe2_set
    __swig_getmethods__["pe2"] = _nmtlib.workspace_flat_pe2_get
    if _newclass:
        pe2 = _swig_property(_nmtlib.workspace_flat_pe2_get, _nmtlib.workspace_flat_pe2_set)
    __swig_setmethods__["pb1"] = _nmtlib.workspace_flat_pb1_set
    __swig_getmethods__["pb1"] = _nmtlib.workspace_flat_pb1_get
    if _newclass:
        pb1 = _swig_property(_nmtlib.workspace_flat_pb1_get, _nmtlib.workspace_flat_pb1_set)
    __swig_setmethods__["pb2"] = _nmtlib.workspace_flat_pb2_set
    __swig_getmethods__["pb2"] = _nmtlib.workspace_flat_pb2_get
    if _newclass:
        pb2 = _swig_property(_nmtlib.workspace_flat_pb2_get, _nmtlib.workspace_flat_pb2_set)
    __swig_setmethods__["fs"] = _nmtlib.workspace_flat_fs_set
    __swig_getmethods__["fs"] = _nmtlib.workspace_flat_fs_get
    if _newclass:
        fs = _swig_property(_nmtlib.workspace_flat_fs_get, _nmtlib.workspace_flat_fs_set)
    __swig_setmethods__["is_teb"] = _nmtlib.workspace_flat_is_teb_set
    __swig_getmethods__["is_teb"] = _nmtlib.workspace_flat_is_teb_get
    if _newclass:
        is_teb = _swig_property(_nmtlib.workspace_flat_is_teb_get, _nmtlib.workspace_flat_is_teb_set)
    __swig_setmethods__["n_cells"] = _nmtlib.workspace_flat_n_cells_set
    __swig_getmethods__["n_cells"] = _nmtlib.workspace_flat_n_cells_get
    if _newclass:
        n_cells = _swig_property(_nmtlib.workspace_flat_n_cells_get, _nmtlib.workspace_flat_n_cells_set)
    __swig_setmethods__["coupling_matrix_unbinned"] = _nmtlib.workspace_flat_coupling_matrix_unbinned_set
    __swig_getmethods__["coupling_matrix_unbinned"] = _nmtlib.workspace_flat_coupling_matrix_unbinned_get
    if _newclass:
        coupling_matrix_unbinned = _swig_property(_nmtlib.workspace_flat_coupling_matrix_unbinned_get, _nmtlib.workspace_flat_coupling_matrix_unbinned_set)
    __swig_setmethods__["coupling_matrix_binned"] = _nmtlib.workspace_flat_coupling_matrix_binned_set
    __swig_getmethods__["coupling_matrix_binned"] = _nmtlib.workspace_flat_coupling_matrix_binned_get
    if _newclass:
        coupling_matrix_binned = _swig_property(_nmtlib.workspace_flat_coupling_matrix_binned_get, _nmtlib.workspace_flat_coupling_matrix_binned_set)
    __swig_setmethods__["bin"] = _nmtlib.workspace_flat_bin_set
    __swig_getmethods__["bin"] = _nmtlib.workspace_flat_bin_get
    if _newclass:
        bin = _swig_property(_nmtlib.workspace_flat_bin_get, _nmtlib.workspace_flat_bin_set)
    __swig_setmethods__["lmax"] = _nmtlib.workspace_flat_lmax_set
    __swig_getmethods__["lmax"] = _nmtlib.workspace_flat_lmax_get
    if _newclass:
        lmax = _swig_property(_nmtlib.workspace_flat_lmax_get, _nmtlib.workspace_flat_lmax_set)
    __swig_setmethods__["coupling_matrix_binned_gsl"] = _nmtlib.workspace_flat_coupling_matrix_binned_gsl_set
    __swig_getmethods__["coupling_matrix_binned_gsl"] = _nmtlib.workspace_flat_coupling_matrix_binned_gsl_get
    if _newclass:
        coupling_matrix_binned_gsl = _swig_property(_nmtlib.workspace_flat_coupling_matrix_binned_gsl_get, _nmtlib.workspace_flat_coupling_matrix_binned_gsl_set)
    __swig_setmethods__["coupling_matrix_perm"] = _nmtlib.workspace_flat_coupling_matrix_perm_set
    __swig_getmethods__["coupling_matrix_perm"] = _nmtlib.workspace_flat_coupling_matrix_perm_get
    if _newclass:
        coupling_matrix_perm = _swig_property(_nmtlib.workspace_flat_coupling_matrix_perm_get, _nmtlib.workspace_flat_coupling_matrix_perm_set)

    def __init__(self):
        this = _nmtlib.new_workspace_flat()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _nmtlib.delete_workspace_flat
    __del__ = lambda self: None
workspace_flat_swigregister = _nmtlib.workspace_flat_swigregister
workspace_flat_swigregister(workspace_flat)


def workspace_flat_free(w):
    return _nmtlib.workspace_flat_free(w)
workspace_flat_free = _nmtlib.workspace_flat_free

def compute_coupling_matrix_flat(fl1, fl2, bin, lmn_x, lmx_x, lmn_y, lmx_y, is_teb):
    return _nmtlib.compute_coupling_matrix_flat(fl1, fl2, bin, lmn_x, lmx_x, lmn_y, lmx_y, is_teb)
compute_coupling_matrix_flat = _nmtlib.compute_coupling_matrix_flat

def compute_deprojection_bias_flat(fl1, fl2, bin, lmn_x, lmx_x, lmn_y, lmx_y, nl_prop, l_prop, cl_proposal, cl_bias):
    return _nmtlib.compute_deprojection_bias_flat(fl1, fl2, bin, lmn_x, lmx_x, lmn_y, lmx_y, nl_prop, l_prop, cl_proposal, cl_bias)
compute_deprojection_bias_flat = _nmtlib.compute_deprojection_bias_flat

def couple_cl_l_flat_fast(w, nl, larr, cl_in, cl_out):
    return _nmtlib.couple_cl_l_flat_fast(w, nl, larr, cl_in, cl_out)
couple_cl_l_flat_fast = _nmtlib.couple_cl_l_flat_fast

def couple_cl_l_flat_quick(w, nl, larr, cl_in, cl_out):
    return _nmtlib.couple_cl_l_flat_quick(w, nl, larr, cl_in, cl_out)
couple_cl_l_flat_quick = _nmtlib.couple_cl_l_flat_quick

def decouple_cl_l_flat(w, cl_in, cl_noise_in, cl_bias, cl_out):
    return _nmtlib.decouple_cl_l_flat(w, cl_in, cl_noise_in, cl_bias, cl_out)
decouple_cl_l_flat = _nmtlib.decouple_cl_l_flat

def compute_coupled_cell_flat(fl1, fl2, bin, cl_out, lmn_x, lmx_x, lmn_y, lmx_y):
    return _nmtlib.compute_coupled_cell_flat(fl1, fl2, bin, cl_out, lmn_x, lmx_x, lmn_y, lmx_y)
compute_coupled_cell_flat = _nmtlib.compute_coupled_cell_flat

def compute_power_spectra_flat(fl1, fl2, bin, lmn_x, lmx_x, lmn_y, lmx_y, w0, cl_noise, nl_prop, l_prop, cl_prop, cl_out):
    return _nmtlib.compute_power_spectra_flat(fl1, fl2, bin, lmn_x, lmx_x, lmn_y, lmx_y, w0, cl_noise, nl_prop, l_prop, cl_prop, cl_out)
compute_power_spectra_flat = _nmtlib.compute_power_spectra_flat
class workspace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, workspace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, workspace, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lmax"] = _nmtlib.workspace_lmax_set
    __swig_getmethods__["lmax"] = _nmtlib.workspace_lmax_get
    if _newclass:
        lmax = _swig_property(_nmtlib.workspace_lmax_get, _nmtlib.workspace_lmax_set)
    __swig_setmethods__["lmax_fields"] = _nmtlib.workspace_lmax_fields_set
    __swig_getmethods__["lmax_fields"] = _nmtlib.workspace_lmax_fields_get
    if _newclass:
        lmax_fields = _swig_property(_nmtlib.workspace_lmax_fields_get, _nmtlib.workspace_lmax_fields_set)
    __swig_setmethods__["lmax_mask"] = _nmtlib.workspace_lmax_mask_set
    __swig_getmethods__["lmax_mask"] = _nmtlib.workspace_lmax_mask_get
    if _newclass:
        lmax_mask = _swig_property(_nmtlib.workspace_lmax_mask_get, _nmtlib.workspace_lmax_mask_set)
    __swig_setmethods__["is_teb"] = _nmtlib.workspace_is_teb_set
    __swig_getmethods__["is_teb"] = _nmtlib.workspace_is_teb_get
    if _newclass:
        is_teb = _swig_property(_nmtlib.workspace_is_teb_get, _nmtlib.workspace_is_teb_set)
    __swig_setmethods__["ncls"] = _nmtlib.workspace_ncls_set
    __swig_getmethods__["ncls"] = _nmtlib.workspace_ncls_get
    if _newclass:
        ncls = _swig_property(_nmtlib.workspace_ncls_get, _nmtlib.workspace_ncls_set)
    __swig_setmethods__["cs"] = _nmtlib.workspace_cs_set
    __swig_getmethods__["cs"] = _nmtlib.workspace_cs_get
    if _newclass:
        cs = _swig_property(_nmtlib.workspace_cs_get, _nmtlib.workspace_cs_set)
    __swig_setmethods__["beam_prod"] = _nmtlib.workspace_beam_prod_set
    __swig_getmethods__["beam_prod"] = _nmtlib.workspace_beam_prod_get
    if _newclass:
        beam_prod = _swig_property(_nmtlib.workspace_beam_prod_get, _nmtlib.workspace_beam_prod_set)
    __swig_setmethods__["pcl_masks"] = _nmtlib.workspace_pcl_masks_set
    __swig_getmethods__["pcl_masks"] = _nmtlib.workspace_pcl_masks_get
    if _newclass:
        pcl_masks = _swig_property(_nmtlib.workspace_pcl_masks_get, _nmtlib.workspace_pcl_masks_set)
    __swig_setmethods__["coupling_matrix_unbinned"] = _nmtlib.workspace_coupling_matrix_unbinned_set
    __swig_getmethods__["coupling_matrix_unbinned"] = _nmtlib.workspace_coupling_matrix_unbinned_get
    if _newclass:
        coupling_matrix_unbinned = _swig_property(_nmtlib.workspace_coupling_matrix_unbinned_get, _nmtlib.workspace_coupling_matrix_unbinned_set)
    __swig_setmethods__["bin"] = _nmtlib.workspace_bin_set
    __swig_getmethods__["bin"] = _nmtlib.workspace_bin_get
    if _newclass:
        bin = _swig_property(_nmtlib.workspace_bin_get, _nmtlib.workspace_bin_set)
    __swig_setmethods__["coupling_matrix_binned"] = _nmtlib.workspace_coupling_matrix_binned_set
    __swig_getmethods__["coupling_matrix_binned"] = _nmtlib.workspace_coupling_matrix_binned_get
    if _newclass:
        coupling_matrix_binned = _swig_property(_nmtlib.workspace_coupling_matrix_binned_get, _nmtlib.workspace_coupling_matrix_binned_set)
    __swig_setmethods__["coupling_matrix_perm"] = _nmtlib.workspace_coupling_matrix_perm_set
    __swig_getmethods__["coupling_matrix_perm"] = _nmtlib.workspace_coupling_matrix_perm_get
    if _newclass:
        coupling_matrix_perm = _swig_property(_nmtlib.workspace_coupling_matrix_perm_get, _nmtlib.workspace_coupling_matrix_perm_set)

    def __init__(self):
        this = _nmtlib.new_workspace()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _nmtlib.delete_workspace
    __del__ = lambda self: None
workspace_swigregister = _nmtlib.workspace_swigregister
workspace_swigregister(workspace)


def compute_coupling_matrix(fl1, fl2, bin, is_teb, niter, lmax_mask):
    return _nmtlib.compute_coupling_matrix(fl1, fl2, bin, is_teb, niter, lmax_mask)
compute_coupling_matrix = _nmtlib.compute_coupling_matrix

def update_coupling_matrix(w, n_rows, new_matrix):
    return _nmtlib.update_coupling_matrix(w, n_rows, new_matrix)
update_coupling_matrix = _nmtlib.update_coupling_matrix

def workspace_update_binning(w, bin):
    return _nmtlib.workspace_update_binning(w, bin)
workspace_update_binning = _nmtlib.workspace_update_binning

def workspace_update_beams(w, nl1, b1, nl2, b2):
    return _nmtlib.workspace_update_beams(w, nl1, b1, nl2, b2)
workspace_update_beams = _nmtlib.workspace_update_beams

def workspace_free(w):
    return _nmtlib.workspace_free(w)
workspace_free = _nmtlib.workspace_free

def compute_deprojection_bias(fl1, fl2, cl_proposal, cl_bias, niter):
    return _nmtlib.compute_deprojection_bias(fl1, fl2, cl_proposal, cl_bias, niter)
compute_deprojection_bias = _nmtlib.compute_deprojection_bias

def compute_uncorr_noise_deprojection_bias(fl1, map_var, cl_bias, niter):
    return _nmtlib.compute_uncorr_noise_deprojection_bias(fl1, map_var, cl_bias, niter)
compute_uncorr_noise_deprojection_bias = _nmtlib.compute_uncorr_noise_deprojection_bias

def couple_cl_l(w, cl_in, cl_out):
    return _nmtlib.couple_cl_l(w, cl_in, cl_out)
couple_cl_l = _nmtlib.couple_cl_l

def decouple_cl_l(w, cl_in, cl_noise_in, cl_bias, cl_out):
    return _nmtlib.decouple_cl_l(w, cl_in, cl_noise_in, cl_bias, cl_out)
decouple_cl_l = _nmtlib.decouple_cl_l

def compute_bandpower_windows(w, bpw_win_out):
    return _nmtlib.compute_bandpower_windows(w, bpw_win_out)
compute_bandpower_windows = _nmtlib.compute_bandpower_windows

def compute_coupled_cell(fl1, fl2, cl_out):
    return _nmtlib.compute_coupled_cell(fl1, fl2, cl_out)
compute_coupled_cell = _nmtlib.compute_coupled_cell

def compute_power_spectra(fl1, fl2, bin, w0, cl_noise, cl_proposal, cl_out, niter, lmax_mask):
    return _nmtlib.compute_power_spectra(fl1, fl2, bin, w0, cl_noise, cl_proposal, cl_out, niter, lmax_mask)
compute_power_spectra = _nmtlib.compute_power_spectra
class covar_workspace_flat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, covar_workspace_flat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, covar_workspace_flat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bin"] = _nmtlib.covar_workspace_flat_bin_set
    __swig_getmethods__["bin"] = _nmtlib.covar_workspace_flat_bin_get
    if _newclass:
        bin = _swig_property(_nmtlib.covar_workspace_flat_bin_get, _nmtlib.covar_workspace_flat_bin_set)
    __swig_setmethods__["xi00_1122"] = _nmtlib.covar_workspace_flat_xi00_1122_set
    __swig_getmethods__["xi00_1122"] = _nmtlib.covar_workspace_flat_xi00_1122_get
    if _newclass:
        xi00_1122 = _swig_property(_nmtlib.covar_workspace_flat_xi00_1122_get, _nmtlib.covar_workspace_flat_xi00_1122_set)
    __swig_setmethods__["xi00_1221"] = _nmtlib.covar_workspace_flat_xi00_1221_set
    __swig_getmethods__["xi00_1221"] = _nmtlib.covar_workspace_flat_xi00_1221_get
    if _newclass:
        xi00_1221 = _swig_property(_nmtlib.covar_workspace_flat_xi00_1221_get, _nmtlib.covar_workspace_flat_xi00_1221_set)
    __swig_setmethods__["xi02_1122"] = _nmtlib.covar_workspace_flat_xi02_1122_set
    __swig_getmethods__["xi02_1122"] = _nmtlib.covar_workspace_flat_xi02_1122_get
    if _newclass:
        xi02_1122 = _swig_property(_nmtlib.covar_workspace_flat_xi02_1122_get, _nmtlib.covar_workspace_flat_xi02_1122_set)
    __swig_setmethods__["xi02_1221"] = _nmtlib.covar_workspace_flat_xi02_1221_set
    __swig_getmethods__["xi02_1221"] = _nmtlib.covar_workspace_flat_xi02_1221_get
    if _newclass:
        xi02_1221 = _swig_property(_nmtlib.covar_workspace_flat_xi02_1221_get, _nmtlib.covar_workspace_flat_xi02_1221_set)
    __swig_setmethods__["xi22p_1122"] = _nmtlib.covar_workspace_flat_xi22p_1122_set
    __swig_getmethods__["xi22p_1122"] = _nmtlib.covar_workspace_flat_xi22p_1122_get
    if _newclass:
        xi22p_1122 = _swig_property(_nmtlib.covar_workspace_flat_xi22p_1122_get, _nmtlib.covar_workspace_flat_xi22p_1122_set)
    __swig_setmethods__["xi22p_1221"] = _nmtlib.covar_workspace_flat_xi22p_1221_set
    __swig_getmethods__["xi22p_1221"] = _nmtlib.covar_workspace_flat_xi22p_1221_get
    if _newclass:
        xi22p_1221 = _swig_property(_nmtlib.covar_workspace_flat_xi22p_1221_get, _nmtlib.covar_workspace_flat_xi22p_1221_set)
    __swig_setmethods__["xi22m_1122"] = _nmtlib.covar_workspace_flat_xi22m_1122_set
    __swig_getmethods__["xi22m_1122"] = _nmtlib.covar_workspace_flat_xi22m_1122_get
    if _newclass:
        xi22m_1122 = _swig_property(_nmtlib.covar_workspace_flat_xi22m_1122_get, _nmtlib.covar_workspace_flat_xi22m_1122_set)
    __swig_setmethods__["xi22m_1221"] = _nmtlib.covar_workspace_flat_xi22m_1221_set
    __swig_getmethods__["xi22m_1221"] = _nmtlib.covar_workspace_flat_xi22m_1221_get
    if _newclass:
        xi22m_1221 = _swig_property(_nmtlib.covar_workspace_flat_xi22m_1221_get, _nmtlib.covar_workspace_flat_xi22m_1221_set)

    def __init__(self):
        this = _nmtlib.new_covar_workspace_flat()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _nmtlib.delete_covar_workspace_flat
    __del__ = lambda self: None
covar_workspace_flat_swigregister = _nmtlib.covar_workspace_flat_swigregister
covar_workspace_flat_swigregister(covar_workspace_flat)


def covar_workspace_flat_free(cw):
    return _nmtlib.covar_workspace_flat_free(cw)
covar_workspace_flat_free = _nmtlib.covar_workspace_flat_free

def covar_workspace_flat_init(fla1, fla2, ba, flb1, flb2, bb):
    return _nmtlib.covar_workspace_flat_init(fla1, fla2, ba, flb1, flb2, bb)
covar_workspace_flat_init = _nmtlib.covar_workspace_flat_init

def compute_gaussian_covariance_flat(cw, pol_a, pol_b, pol_c, pol_d, wa, wb, nl, larr, clac, clad, clbc, clbd, covar_out):
    return _nmtlib.compute_gaussian_covariance_flat(cw, pol_a, pol_b, pol_c, pol_d, wa, wb, nl, larr, clac, clad, clbc, clbd, covar_out)
compute_gaussian_covariance_flat = _nmtlib.compute_gaussian_covariance_flat
class covar_workspace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, covar_workspace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, covar_workspace, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lmax"] = _nmtlib.covar_workspace_lmax_set
    __swig_getmethods__["lmax"] = _nmtlib.covar_workspace_lmax_get
    if _newclass:
        lmax = _swig_property(_nmtlib.covar_workspace_lmax_get, _nmtlib.covar_workspace_lmax_set)
    __swig_setmethods__["xi00_1122"] = _nmtlib.covar_workspace_xi00_1122_set
    __swig_getmethods__["xi00_1122"] = _nmtlib.covar_workspace_xi00_1122_get
    if _newclass:
        xi00_1122 = _swig_property(_nmtlib.covar_workspace_xi00_1122_get, _nmtlib.covar_workspace_xi00_1122_set)
    __swig_setmethods__["xi00_1221"] = _nmtlib.covar_workspace_xi00_1221_set
    __swig_getmethods__["xi00_1221"] = _nmtlib.covar_workspace_xi00_1221_get
    if _newclass:
        xi00_1221 = _swig_property(_nmtlib.covar_workspace_xi00_1221_get, _nmtlib.covar_workspace_xi00_1221_set)
    __swig_setmethods__["xi02_1122"] = _nmtlib.covar_workspace_xi02_1122_set
    __swig_getmethods__["xi02_1122"] = _nmtlib.covar_workspace_xi02_1122_get
    if _newclass:
        xi02_1122 = _swig_property(_nmtlib.covar_workspace_xi02_1122_get, _nmtlib.covar_workspace_xi02_1122_set)
    __swig_setmethods__["xi02_1221"] = _nmtlib.covar_workspace_xi02_1221_set
    __swig_getmethods__["xi02_1221"] = _nmtlib.covar_workspace_xi02_1221_get
    if _newclass:
        xi02_1221 = _swig_property(_nmtlib.covar_workspace_xi02_1221_get, _nmtlib.covar_workspace_xi02_1221_set)
    __swig_setmethods__["xi22p_1122"] = _nmtlib.covar_workspace_xi22p_1122_set
    __swig_getmethods__["xi22p_1122"] = _nmtlib.covar_workspace_xi22p_1122_get
    if _newclass:
        xi22p_1122 = _swig_property(_nmtlib.covar_workspace_xi22p_1122_get, _nmtlib.covar_workspace_xi22p_1122_set)
    __swig_setmethods__["xi22p_1221"] = _nmtlib.covar_workspace_xi22p_1221_set
    __swig_getmethods__["xi22p_1221"] = _nmtlib.covar_workspace_xi22p_1221_get
    if _newclass:
        xi22p_1221 = _swig_property(_nmtlib.covar_workspace_xi22p_1221_get, _nmtlib.covar_workspace_xi22p_1221_set)
    __swig_setmethods__["xi22m_1122"] = _nmtlib.covar_workspace_xi22m_1122_set
    __swig_getmethods__["xi22m_1122"] = _nmtlib.covar_workspace_xi22m_1122_get
    if _newclass:
        xi22m_1122 = _swig_property(_nmtlib.covar_workspace_xi22m_1122_get, _nmtlib.covar_workspace_xi22m_1122_set)
    __swig_setmethods__["xi22m_1221"] = _nmtlib.covar_workspace_xi22m_1221_set
    __swig_getmethods__["xi22m_1221"] = _nmtlib.covar_workspace_xi22m_1221_get
    if _newclass:
        xi22m_1221 = _swig_property(_nmtlib.covar_workspace_xi22m_1221_get, _nmtlib.covar_workspace_xi22m_1221_set)

    def __init__(self):
        this = _nmtlib.new_covar_workspace()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _nmtlib.delete_covar_workspace
    __del__ = lambda self: None
covar_workspace_swigregister = _nmtlib.covar_workspace_swigregister
covar_workspace_swigregister(covar_workspace)


def covar_workspace_free(cw):
    return _nmtlib.covar_workspace_free(cw)
covar_workspace_free = _nmtlib.covar_workspace_free

def covar_workspace_init(fla1, fla2, flb1, flb2, lmax, niter):
    return _nmtlib.covar_workspace_init(fla1, fla2, flb1, flb2, lmax, niter)
covar_workspace_init = _nmtlib.covar_workspace_init

def compute_gaussian_covariance(cw, pol_a, pol_b, pol_c, pol_d, wa, wb, clac, clad, clbc, clbd, covar_out):
    return _nmtlib.compute_gaussian_covariance(cw, pol_a, pol_b, pol_c, pol_d, wa, wb, clac, clad, clbc, clbd, covar_out)
compute_gaussian_covariance = _nmtlib.compute_gaussian_covariance

def workspace_write_fits(w, fname):
    return _nmtlib.workspace_write_fits(w, fname)
workspace_write_fits = _nmtlib.workspace_write_fits

def workspace_read_fits(fname):
    return _nmtlib.workspace_read_fits(fname)
workspace_read_fits = _nmtlib.workspace_read_fits

def workspace_flat_read_fits(fname):
    return _nmtlib.workspace_flat_read_fits(fname)
workspace_flat_read_fits = _nmtlib.workspace_flat_read_fits

def workspace_flat_write_fits(w, fname):
    return _nmtlib.workspace_flat_write_fits(w, fname)
workspace_flat_write_fits = _nmtlib.workspace_flat_write_fits

def covar_workspace_write_fits(cw, fname):
    return _nmtlib.covar_workspace_write_fits(cw, fname)
covar_workspace_write_fits = _nmtlib.covar_workspace_write_fits

def covar_workspace_read_fits(fname):
    return _nmtlib.covar_workspace_read_fits(fname)
covar_workspace_read_fits = _nmtlib.covar_workspace_read_fits

def covar_workspace_flat_write_fits(cw, fname):
    return _nmtlib.covar_workspace_flat_write_fits(cw, fname)
covar_workspace_flat_write_fits = _nmtlib.covar_workspace_flat_write_fits

def covar_workspace_flat_read_fits(fname):
    return _nmtlib.covar_workspace_flat_read_fits(fname)
covar_workspace_flat_read_fits = _nmtlib.covar_workspace_flat_read_fits

def get_nell_list(bins, iout):
    return _nmtlib.get_nell_list(bins, iout)
get_nell_list = _nmtlib.get_nell_list

def get_nell(bins, ibin):
    return _nmtlib.get_nell(bins, ibin)
get_nell = _nmtlib.get_nell

def get_ell_list(bins, ibin, iout):
    return _nmtlib.get_ell_list(bins, ibin, iout)
get_ell_list = _nmtlib.get_ell_list

def get_weight_list(bins, ibin, dout):
    return _nmtlib.get_weight_list(bins, ibin, dout)
get_weight_list = _nmtlib.get_weight_list

def get_lmax_py(is_healpix, nside, nx, ny, delta_phi, delta_theta, phi0, theta0):
    return _nmtlib.get_lmax_py(is_healpix, nside, nx, ny, delta_phi, delta_theta, phi0, theta0)
get_lmax_py = _nmtlib.get_lmax_py

def get_lmax_from_cs_py(cs):
    return _nmtlib.get_lmax_from_cs_py(cs)
get_lmax_from_cs_py = _nmtlib.get_lmax_from_cs_py

def get_ell_eff(bins, dout):
    return _nmtlib.get_ell_eff(bins, dout)
get_ell_eff = _nmtlib.get_ell_eff

def get_ell_eff_flat(bins, dout):
    return _nmtlib.get_ell_eff_flat(bins, dout)
get_ell_eff_flat = _nmtlib.get_ell_eff_flat

def bins_create_py(nell1, nell2, nell3, nell4, lmax):
    return _nmtlib.bins_create_py(nell1, nell2, nell3, nell4, lmax)
bins_create_py = _nmtlib.bins_create_py

def update_mcm(w, n_rows, nell3):
    return _nmtlib.update_mcm(w, n_rows, nell3)
update_mcm = _nmtlib.update_mcm

def get_bandpower_windows(w, dout):
    return _nmtlib.get_bandpower_windows(w, dout)
get_bandpower_windows = _nmtlib.get_bandpower_windows

def get_mcm(w, dout):
    return _nmtlib.get_mcm(w, dout)
get_mcm = _nmtlib.get_mcm

def bins_flat_create_py(npix_1, nell3):
    return _nmtlib.bins_flat_create_py(npix_1, nell3)
bins_flat_create_py = _nmtlib.bins_flat_create_py

def bin_cl(bins, ncl1, dout):
    return _nmtlib.bin_cl(bins, ncl1, dout)
bin_cl = _nmtlib.bin_cl

def bin_cl_flat(bins, nell3, ncl1, dout):
    return _nmtlib.bin_cl_flat(bins, nell3, ncl1, dout)
bin_cl_flat = _nmtlib.bin_cl_flat

def unbin_cl(bins, ncl1, dout):
    return _nmtlib.unbin_cl(bins, ncl1, dout)
unbin_cl = _nmtlib.unbin_cl

def unbin_cl_flat(bins, ncl1, nell3, dout):
    return _nmtlib.unbin_cl_flat(bins, ncl1, nell3, dout)
unbin_cl_flat = _nmtlib.unbin_cl_flat

def field_alloc_new(is_healpix, nside, lmax_sht, nx, ny, delta_phi, delta_theta, phi0, theta0, npix_1, nmap_2, ntmp_3, nell3, pure_e, pure_b, n_iter_mask_purify, tol_pinv, n_iter, masked_input):
    return _nmtlib.field_alloc_new(is_healpix, nside, lmax_sht, nx, ny, delta_phi, delta_theta, phi0, theta0, npix_1, nmap_2, ntmp_3, nell3, pure_e, pure_b, n_iter_mask_purify, tol_pinv, n_iter, masked_input)
field_alloc_new = _nmtlib.field_alloc_new

def field_alloc_new_notemp(is_healpix, nside, lmax_sht, nx, ny, delta_phi, delta_theta, phi0, theta0, npix_1, nmap_2, nell3, pure_e, pure_b, n_iter_mask_purify, n_iter, masked_input):
    return _nmtlib.field_alloc_new_notemp(is_healpix, nside, lmax_sht, nx, ny, delta_phi, delta_theta, phi0, theta0, npix_1, nmap_2, nell3, pure_e, pure_b, n_iter_mask_purify, n_iter, masked_input)
field_alloc_new_notemp = _nmtlib.field_alloc_new_notemp

def field_alloc_new_flat(nx, ny, lx, ly, npix_1, nmap_2, ntmp_3, ncl1, pure_e, pure_b, tol_pinv, masked_input):
    return _nmtlib.field_alloc_new_flat(nx, ny, lx, ly, npix_1, nmap_2, ntmp_3, ncl1, pure_e, pure_b, tol_pinv, masked_input)
field_alloc_new_flat = _nmtlib.field_alloc_new_flat

def field_alloc_new_notemp_flat(nx, ny, lx, ly, npix_1, nmap_2, ncl1, pure_e, pure_b, masked_input):
    return _nmtlib.field_alloc_new_notemp_flat(nx, ny, lx, ly, npix_1, nmap_2, ncl1, pure_e, pure_b, masked_input)
field_alloc_new_notemp_flat = _nmtlib.field_alloc_new_notemp_flat

def get_map(fl, imap, ldout):
    return _nmtlib.get_map(fl, imap, ldout)
get_map = _nmtlib.get_map

def get_map_flat(fl, imap, dout):
    return _nmtlib.get_map_flat(fl, imap, dout)
get_map_flat = _nmtlib.get_map_flat

def get_temp(fl, itemp, imap, ldout):
    return _nmtlib.get_temp(fl, itemp, imap, ldout)
get_temp = _nmtlib.get_temp

def get_temp_flat(fl, itemp, imap, dout):
    return _nmtlib.get_temp_flat(fl, itemp, imap, dout)
get_temp_flat = _nmtlib.get_temp_flat

def apomask(npix_1, ldout, aposize, apotype):
    return _nmtlib.apomask(npix_1, ldout, aposize, apotype)
apomask = _nmtlib.apomask

def apomask_flat(nx, ny, lx, ly, npix_1, dout, aposize, apotype):
    return _nmtlib.apomask_flat(nx, ny, lx, ly, npix_1, dout, aposize, apotype)
apomask_flat = _nmtlib.apomask_flat

def synfast_new(is_healpix, nside, nx, ny, delta_phi, delta_theta, phi0, theta0, nfields, seed, ncl1, ncl2, ldout):
    return _nmtlib.synfast_new(is_healpix, nside, nx, ny, delta_phi, delta_theta, phi0, theta0, nfields, seed, ncl1, ncl2, ldout)
synfast_new = _nmtlib.synfast_new

def synfast_new_flat(nx, ny, lx, ly, nfields, seed, ncl1, ncl2, dout):
    return _nmtlib.synfast_new_flat(nx, ny, lx, ly, nfields, seed, ncl1, ncl2, dout)
synfast_new_flat = _nmtlib.synfast_new_flat

def comp_coupling_matrix(fl1, fl2, bin, is_teb, n_iter, lmax_mask):
    return _nmtlib.comp_coupling_matrix(fl1, fl2, bin, is_teb, n_iter, lmax_mask)
comp_coupling_matrix = _nmtlib.comp_coupling_matrix

def comp_coupling_matrix_flat(fl1, fl2, bin, lmn_x, lmx_x, lmn_y, lmx_y, is_teb):
    return _nmtlib.comp_coupling_matrix_flat(fl1, fl2, bin, lmn_x, lmx_x, lmn_y, lmx_y, is_teb)
comp_coupling_matrix_flat = _nmtlib.comp_coupling_matrix_flat

def read_workspace(fname):
    return _nmtlib.read_workspace(fname)
read_workspace = _nmtlib.read_workspace

def write_workspace(w, fname):
    return _nmtlib.write_workspace(w, fname)
write_workspace = _nmtlib.write_workspace

def read_workspace_flat(fname):
    return _nmtlib.read_workspace_flat(fname)
read_workspace_flat = _nmtlib.read_workspace_flat

def write_workspace_flat(w, fname):
    return _nmtlib.write_workspace_flat(w, fname)
write_workspace_flat = _nmtlib.write_workspace_flat

def comp_uncorr_noise_deproj_bias(fl1, npix_1, dout, n_iter):
    return _nmtlib.comp_uncorr_noise_deproj_bias(fl1, npix_1, dout, n_iter)
comp_uncorr_noise_deproj_bias = _nmtlib.comp_uncorr_noise_deproj_bias

def comp_deproj_bias(fl1, fl2, ncl1, dout, n_iter):
    return _nmtlib.comp_deproj_bias(fl1, fl2, ncl1, dout, n_iter)
comp_deproj_bias = _nmtlib.comp_deproj_bias

def comp_deproj_bias_flat(fl1, fl2, bin, lmn_x, lmx_x, lmn_y, lmx_y, nell3, ncl1, dout):
    return _nmtlib.comp_deproj_bias_flat(fl1, fl2, bin, lmn_x, lmx_x, lmn_y, lmx_y, nell3, ncl1, dout)
comp_deproj_bias_flat = _nmtlib.comp_deproj_bias_flat

def write_covar_workspace(cw, fname):
    return _nmtlib.write_covar_workspace(cw, fname)
write_covar_workspace = _nmtlib.write_covar_workspace

def read_covar_workspace(fname):
    return _nmtlib.read_covar_workspace(fname)
read_covar_workspace = _nmtlib.read_covar_workspace

def covar_workspace_init_py(fa1, fa2, fb1, fb2, lmax, n_iter):
    return _nmtlib.covar_workspace_init_py(fa1, fa2, fb1, fb2, lmax, n_iter)
covar_workspace_init_py = _nmtlib.covar_workspace_init_py

def write_covar_workspace_flat(cw, fname):
    return _nmtlib.write_covar_workspace_flat(cw, fname)
write_covar_workspace_flat = _nmtlib.write_covar_workspace_flat

def read_covar_workspace_flat(fname):
    return _nmtlib.read_covar_workspace_flat(fname)
read_covar_workspace_flat = _nmtlib.read_covar_workspace_flat

def covar_workspace_flat_init_py(fa1, fa2, ba, fb1, fb2, bb):
    return _nmtlib.covar_workspace_flat_init_py(fa1, fa2, ba, fb1, fb2, bb)
covar_workspace_flat_init_py = _nmtlib.covar_workspace_flat_init_py

def comp_gaussian_covariance(cw, pol_a1, pol_a2, pol_b1, pol_b2, wa, wb, ncl11, ncl12, ncl21, ncl22, dout):
    return _nmtlib.comp_gaussian_covariance(cw, pol_a1, pol_a2, pol_b1, pol_b2, wa, wb, ncl11, ncl12, ncl21, ncl22, dout)
comp_gaussian_covariance = _nmtlib.comp_gaussian_covariance

def comp_gaussian_covariance_flat(cw, pol_a1, pol_a2, pol_b1, pol_b2, wa, wb, nell3, ncl11, ncl12, ncl21, ncl22, dout):
    return _nmtlib.comp_gaussian_covariance_flat(cw, pol_a1, pol_a2, pol_b1, pol_b2, wa, wb, nell3, ncl11, ncl12, ncl21, ncl22, dout)
comp_gaussian_covariance_flat = _nmtlib.comp_gaussian_covariance_flat

def comp_pspec_coupled(fl1, fl2, dout):
    return _nmtlib.comp_pspec_coupled(fl1, fl2, dout)
comp_pspec_coupled = _nmtlib.comp_pspec_coupled

def comp_pspec_coupled_flat(fl1, fl2, bin, dout, lmn_x, lmx_x, lmn_y, lmx_y):
    return _nmtlib.comp_pspec_coupled_flat(fl1, fl2, bin, dout, lmn_x, lmx_x, lmn_y, lmx_y)
comp_pspec_coupled_flat = _nmtlib.comp_pspec_coupled_flat

def decouple_cell_py(w, ncl1, ncl2, ncl3, dout):
    return _nmtlib.decouple_cell_py(w, ncl1, ncl2, ncl3, dout)
decouple_cell_py = _nmtlib.decouple_cell_py

def decouple_cell_py_flat(w, ncl1, ncl2, ncl3, dout):
    return _nmtlib.decouple_cell_py_flat(w, ncl1, ncl2, ncl3, dout)
decouple_cell_py_flat = _nmtlib.decouple_cell_py_flat

def couple_cell_py(w, ncl1, dout):
    return _nmtlib.couple_cell_py(w, ncl1, dout)
couple_cell_py = _nmtlib.couple_cell_py

def couple_cell_py_flat(w, nell3, ncl1, dout):
    return _nmtlib.couple_cell_py_flat(w, nell3, ncl1, dout)
couple_cell_py_flat = _nmtlib.couple_cell_py_flat

def comp_pspec(fl1, fl2, bin, w0, ncl1, ncl2, dout, n_iter, lmax_mask):
    return _nmtlib.comp_pspec(fl1, fl2, bin, w0, ncl1, ncl2, dout, n_iter, lmax_mask)
comp_pspec = _nmtlib.comp_pspec

def wsp_update_beams(w, nell3, nell4):
    return _nmtlib.wsp_update_beams(w, nell3, nell4)
wsp_update_beams = _nmtlib.wsp_update_beams

def wsp_update_bins(w, b):
    return _nmtlib.wsp_update_bins(w, b)
wsp_update_bins = _nmtlib.wsp_update_bins

def comp_pspec_flat(fl1, fl2, bin, w0, ncl1, nell3, ncl2, dout, lmn_x, lmx_x, lmn_y, lmx_y):
    return _nmtlib.comp_pspec_flat(fl1, fl2, bin, w0, ncl1, nell3, ncl2, dout, lmn_x, lmx_x, lmn_y, lmx_y)
comp_pspec_flat = _nmtlib.comp_pspec_flat
# This file is compatible with both classic and new-style classes.


